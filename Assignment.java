/* Assignment.java */
/* Generated By:JavaCC: Do not edit this line. Assignment.java */
import java.util.ArrayList;
import java.io.*;

public class Assignment implements AssignmentConstants {
    /* Java program is placed here */
    // the main function of java program
    static class MyException extends Exception{
        //the error class to show DIVERGENCE

        MyException(String message){
            super(message);
        }
    }

    public static void main(String[] args) {
        try {
            Assignment parser = new Assignment( System.in ) ;
            parser.Root(System.out) ;
        } catch(TokenMgrError e){
            System.out.println("FAIL");
            System.err.println(e.getMessage());
        } catch(ParseException e){
            System.out.println("FAIL");
            String message=e.getMessage();
            message = message.replace("\u005c"","");
            String[] messageL=message.split(" ");
            ArrayList<String> result = new ArrayList<String>();
            for(int i = 0; i < messageL.length; i++) {
                if(messageL[i]!=" "|messageL[i]!="    "|messageL[i]!="  "|messageL[i]!="") {
                    result.add(messageL[i]);
                }
            }
//            for(int i=0;i<result.size();i++){
//                System.out.println("."+result.get(i)+".");
//            }
            int getExp;
            for(int i=0; i<result.size();i++){
                if((result.get(i)).equals("line")){
                    String s = result.get(i+1);
                    String[] sl = s.split(",");
                    System.err.println(sl[0]);
                }
                if((result.get(i)).equals("expecting:\u005cn")
                    ||(result.get(i)).equals("expecting")){
                    getExp=i;
                    for(int j = getExp+1; j<result.size();j++){
                        if((result.get(j)).equals("{")){
                            System.err.println("Missing Opening Bracket.");
                            break;
                        }else if((result.get(j)).equals("}")){
                            System.err.println("Missing Closing Bracket.");
                            break;
                        }else if((result.get(j)).equals("(")){
                            System.err.println("Missing Opening Parenthesis.");
                            break;
                        }else if((result.get(j)).equals(")")){
                            System.err.println("Missing Closing Parenthesis.");
                            break;
                        }else if((result.get(j)).equals("DEF")){
                            System.err.println("Missing DEF keyword.");
                            break;
                        }else if((result.get(j)).equals(";")){
                            System.err.println("Missing Semicolon.");
                            break;
                        }else if((result.get(j)).equals("DEF")){
                            System.err.println("Missing DEF keyword.");
                            break;
                        }else if((result.get(j)).equals("<FUNC_NAME>")
                                ||(result.get(j)).equals("<PARAM>")
                                ||(result.get(j)).equals("<NUM>")){
                            System.err.println("Function body cannot be empty.");
                            break;
                        }
                        if(j==result.size()-1){
                            System.err.println("Error.Invalid Function name or parameter name");
                        }
                    }
                    break;
                }
            }//System.err.println(e.getMessage());
        } catch(MyException e){
            System.err.println(e.getMessage());
        }
    }
    // an array list to save the functions in the file
    static class FuncList{
        private ArrayList<Func> funcList = new ArrayList<Func>();
        private Boolean hasMain = false;

        void addFunc(Func newFunc){
            funcList.add(funcList.size(),newFunc);
        }

        int getSize(){
            return funcList.size();
        }

        Boolean getHasMain(){
            return hasMain;
        }

        void insertMain() throws MyException{
            if(!hasMain){
                hasMain=true;
            }else{
                System.out.println("FAIL");
                System.err.println(funcList.size()+1);
                System.err.println("Duplicate Main function.");
                throw new MyException("");
            }
        }

        Func getFunc(String funcName) throws MyException{
                int ret=-1;
            for(int i=0;i<funcList.size();i++){
                if((funcList.get(i)).getFuncName().equals(funcName)){
                    ret=i;
                    break;
                }
            }
            if(ret==-1){
                System.out.println("FAIL");
                System.err.println("-1");
                System.err.println("Function not found.");
                throw new MyException("");
            }
            return funcList.get(ret);
        }

        Func getMain()throws MyException{
            return this.getFunc("MAIN");
        }

        int solveM(BodyList b)throws MyException{
            int value;
            value=compileM(b);
            //System.out.println("solveM:");
            //System.out.println(value);
            return value;
        }

        int compileM(BodyList b)throws MyException{
            ArrayList<SepBody> sep = b.getBody();

            //get first operand
            int value1 = getOpdM(b,0);

            if(value1==-1){//is a function call
                value1=solveFCall(sep,0);
            }

            int j=1;
            while(j<b.getSepSize()){
                //get the following operand
                int value2 = getOpdM(b,j);
                if(value2==-1){
                    value2=solveFCall(sep,j);
                }
                //get operator
                if((b.getOpAt(j-1)).equals("+")){ //plus
                    value1+=value2;
                }
                else{ //multiply
                    value1*=value2;
                }
                j++;
            }
            return value1;
        }

        int solveFCall(ArrayList<SepBody> sep,int j)throws MyException{
            int param = compileM(sep.get(j).getB());
            return run(sep.get(j).getName(),param,"MAIN");
        }

        int getOpdM(BodyList body,int index){
            if(body.getSepAt(index).isNum()){
                return Integer.parseInt((body.getSepAt(index)).getName());
            }else{
                return -1; // is func call
            }
        }

        int run(String now,int param,String from)throws MyException{
            //@fName = the function called
            //@from the function it was called from
            Func f=this.getFunc(now);
            BodyList b = f.getFuncBody();

            return compileF(b,param,from,now);
        }

        int compileF(BodyList b,int param,String from,String now) throws MyException{
            ArrayList<SepBody> sep = b.getBody();

            //get first operand
            int value1=getOpdF(b,0);

            if(value1==-2){
                value1=param;
            }else if(value1==-1){
                if((sep.get(0)).getName().equals(from)){
                    throw new MyException("DIVERGENCE");
                }
                int arg = compileF((sep.get(0)).getB(),param,now,(sep.get(0)).getName());
               // System.out.println(arg);
                value1=run((sep.get(0)).getName(),arg,now);
            }
            int j =1;
            while(j<b.getSepSize()){
                //get the following operand
                int value2 = getOpdF(b,j);
                if(value2==-2){
                    value2=param;
                }else if(value2==-1){
                    if((sep.get(j)).getName().equals(from)){
                        throw new MyException("DIVERGENCE");
                    }
                    int arg = compileF((sep.get(j)).getB(),param,now,(sep.get(j)).getName());
                   // System.out.println(arg);
                    value2=run((sep.get(j)).getName(),arg,now);
                }

                //get operator
                if((b.getOpAt(j-1)).equals("+")){ //plus
                    value1+=value2;
                }
                else{ //multiply
                    value1*=value2;
                }
                j++;
            }
            return value1;
        }

        int getOpdF(BodyList body,int index) {
            if(body.getSepAt(index).isNum()){
                return Integer.parseInt((body.getSepAt(index)).getName());
            }else if(body.getSepAt(index).isCall()){
                return -1;
            }else{ // is a parameter
                return -2;
            }
        }

        void description(){
            for(int i =0; i<funcList.size();i++){
                funcList.get(i).description();
            }
        }

    }
    // a function object
    static class Func{
        // **the MAIN class will have "_" as its funcParam.
        private String funcName;
        private String funcParam;
        private BodyList funcBody;

        // constructor
        Func(String n, String p) {
            funcName = n;
            funcParam = p;
        }
        // get function name
        String getFuncName(){
            return funcName;
        }
        // get function body
        BodyList getFuncBody(){
            return funcBody;
        }
        // get function body
        String getFuncParam(){
            return funcParam;
        }
        // check for self calling function
        Boolean checkLoop(String fName){
            return funcBody.check(fName);
        }
        // set the function body after process it through parser
        public void setFuncBody(BodyList b){
            this.funcBody = b;
        }

        void description(){
            System.out.println("function name:"+funcName);
            System.out.println("function param:"+funcParam);
            System.out.println("function body:");
            funcBody.description();
        }
    }
    // a function body object (ArrayList)
    static class BodyList{
        protected enum Type {NUM,OPERATOR,CALL,PARAM}
        private ArrayList<SepBody> bodyList = new ArrayList<SepBody>();
        private ArrayList<String> opList = new ArrayList<String>();

        void addToBody(SepBody b){
            bodyList.add(bodyList.size(),b);
        }
        void addToOp(String s){
            opList.add(opList.size(),s);
        }

        Boolean check(String fName){
            for(int i=0;i<bodyList.size();i++){
                if((bodyList.get(i)).checkSep(fName)){
                    return true;
                }
            }return false;
        }

        Boolean isEmpty(){
            return bodyList.size()<=0;
        }

        ArrayList<SepBody> getBody(){
            return bodyList;
        }

        SepBody getSepAt(int index){
            return bodyList.get(index);
        }

        String getOpAt(int index){
            return opList.get(index);
        }

        int getSepSize(){
            return bodyList.size();
        }

        void description(){
            String s;
            for(int i =0; i<bodyList.size();i++){
                this.bodyList.get(i).description();
            }
            s="<";
            for(int i=0;i<opList.size();i++){
                s+=opList.get(i);
            }
            s+=">";
            System.out.println(s);
        }
    }
    // an object in body
    static class SepBody{
        protected enum Type {NUM,CALL,PARAM}
        private Type type;
        private String callName; // function call, number or param
        private BodyList bList;

        SepBody(String s,String t){
           // System.out.println(t);
            this.callName=s;
            if(t.equals("num")){
                this.type = Type.NUM;
            }else if(t.equals("param")){
                this.type = Type.PARAM;
            }
            this.bList=new BodyList(); // empty
        }
        // only for function call in the body
        SepBody(String s,String t,BodyList b){
            //System.out.println("call");
            this.callName=s;
            this.type=Type.CALL;
            this.bList=b;
        }

        void description(){
            System.out.println("Detail: "+this.callName);
            if(this.type==Type.NUM){
                System.out.println("Type: NUM");
            }else if(this.type==Type.CALL){
                System.out.println("Type: CALL");
            }else{
                System.out.println("Type: PARAM");
            }
            if(bList.getSepSize()>=1){
                System.out.println("*");
                bList.description();
                System.out.println("*");
            }
        }
        Boolean checkSep(String fName){
            if(this.bList.getSepSize()<1){
                if(this.callName.equals(fName)){
                    return true;
                }
            }return bList.check(fName);
        }
        BodyList getB(){
            return bList;
        }
        String getName(){
            return callName;
        }
        Boolean isNum(){
            return type == Type.NUM;
        }
        Boolean isParam(){
            return type == Type.PARAM;
        }
        Boolean isCall(){
            return type == Type.CALL;
        }
    }

/* Root Production */
  static final public void Root(PrintStream printStream) throws ParseException, MyException {int retVal;
Boolean a;
FuncList list;
list = new FuncList();
    a = Start(list);
if(a==true){
            printStream.println("PASS");
        }else{
            printStream.println("FAIL");
            //break;
        }
    retVal = Cal(list);
printStream.println(retVal);
  }

  static final public Boolean Start(FuncList myList) throws ParseException, MyException {Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEF:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(DEF);
      jj_consume_token(SPACE);
      t = jj_consume_token(FUNC_NAME);
      jj_consume_token(SPACE);
      Choose(myList,t.image);
    }
    jj_consume_token(0);
if(!myList.getHasMain()){
            System.out.println("FAIL");
            System.err.println("0");
            System.err.println("Missing Main function");
            {if (true) throw new MyException("");}
        }
        {if ("" != null) return true;}
    throw new Error("Missing return statement in function");
  }

  static final public void Choose(FuncList myList,String fName) throws ParseException, MyException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_BRAC:{
      jj_consume_token(OPEN_BRAC);
      Main(myList,fName);
      break;
      }
    case PARAM:{
      t = jj_consume_token(PARAM);
      jj_consume_token(SPACE);
      jj_consume_token(OPEN_BRAC);
      Norm(myList,fName,t.image);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Main(FuncList myList,String fName) throws ParseException, MyException {Token t;
Func newF;
myList.insertMain();
        if(!fName.equals("MAIN")){
            System.out.println("FAIL");
            System.err.println(myList.getSize());
            System.err.println("Only Main function do not have parameter.");
            {if (true) throw new MyException("");}
        }
        newF = new Func("MAIN","_");
    Function(newF,myList);
myList.addFunc(newF);
  }

  static final public void Norm(FuncList myList,String fName,String p) throws ParseException, MyException {Func newF;
Boolean b;
if(fName.equals("MAIN")|fName.equals("DEF")){
            System.out.println("FAIL");
            System.err.println(myList.getSize());
            System.err.println("Main function cannot have parameter");
            {if (true) throw new MyException("");}
        }
        newF = new Func(fName,p);
    Function(newF,myList);
myList.addFunc(newF);
  }

  static final public void Function(Func f,FuncList myList) throws ParseException, MyException {BodyList newB;
    jj_consume_token(SPACE);
    newB = Body();
f.setFuncBody(newB);
    if(newB.isEmpty()){
        System.out.println("FAIL");
        System.err.println(myList.getSize());
        System.err.println("Function body cannot be empty");
        {if (true) throw new MyException("");}}
    jj_consume_token(SPACE);
    jj_consume_token(CLOSE_BRAC);
    jj_consume_token(SPACE);
    jj_consume_token(SEMICOLON);
    jj_consume_token(END_OF_LINE);
  }

  static final public BodyList Body() throws ParseException {String whole;
Token t,operator;
BodyList b;
BodyList bodyL = new BodyList();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FUNC_NAME:{
      t = jj_consume_token(FUNC_NAME);
      jj_consume_token(OPEN_PARENTHESIS);
      b = Body();
      jj_consume_token(CLOSE_PARENTHESIS);
whole=t.image;
            if(whole.equals("MAIN")){
                System.err.println("Main cannot be called in function.");
                //throw new ParseException("Main cannot be called.");
            }
            SepBody nb = new SepBody(whole,"call",b);
            bodyL.addToBody(nb);
      break;
      }
    case NUMBER:{
      t = jj_consume_token(NUMBER);
whole=t.image;
            SepBody nb = new SepBody(whole,"num");
            bodyL.addToBody(nb);
      break;
      }
    case PARAM:{
      t = jj_consume_token(PARAM);
whole=t.image;
            SepBody nb = new SepBody(whole,"param");
            bodyL.addToBody(nb);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MULTIPLY:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        operator = jj_consume_token(PLUS);
        break;
        }
      case MULTIPLY:{
        operator = jj_consume_token(MULTIPLY);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
bodyL.addToOp(operator.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUNC_NAME:{
        t = jj_consume_token(FUNC_NAME);
        jj_consume_token(OPEN_PARENTHESIS);
        b = Body();
        jj_consume_token(CLOSE_PARENTHESIS);
whole=t.image;
             SepBody nb = new SepBody(whole,"call",b);
             bodyL.addToBody(nb);
        break;
        }
      case NUMBER:{
        t = jj_consume_token(NUMBER);
whole=t.image;
            SepBody nb = new SepBody(whole,"num");
            bodyL.addToBody(nb);
        break;
        }
      case PARAM:{
        t = jj_consume_token(PARAM);
whole=t.image;
            SepBody nb = new SepBody(whole,"param");
            bodyL.addToBody(nb);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return bodyL;}
    throw new Error("Missing return statement in function");
  }

  static final public int Cal(FuncList myList) throws ParseException, MyException {int val;
//{myList.description();}
        Func main=myList.getMain();
        BodyList body=main.getFuncBody();

        val=myList.solveM(body);

        {if ("" != null) return val;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AssignmentTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10,0x440,0xc2,0xc,0xc,0xc2,};
   }

  /** Constructor with InputStream. */
  public Assignment(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Assignment(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AssignmentTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Assignment(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AssignmentTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Assignment(AssignmentTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AssignmentTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
